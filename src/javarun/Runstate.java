package javarun;import java.io.FileNotFoundException;import java.io.PrintStream;import java.io.UnsupportedEncodingException;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Timer;import java.util.TimerTask;import java.util.concurrent.Semaphore;public class Runstate {    public static void main(String[] args) throws ParseException, InterruptedException {    	// WebService接口方法类    	GetServiceInfo getServiceInfo = new GetServiceInfo();    	    	// 每天定时去更新库位信息 目前测试时间为16:13:00 如果修改进入TimerKcDataDelete方法中更改时间    	//getServiceInfo.TimerKcDataDelete();    	    	// 每天定时去更新库位信息 目前测试时间为17:13:00 如果修改进入TimerKcDateUpdate方法中更改时间    	//getServiceInfo.TimerKcDataUpdate();            EslTest eslTest = EslTest.Instance;            eslTest.SetEventWay(false);            ThreadExample2 te = new ThreadExample2(eslTest, new Runstate());            new Thread(te).start();         // 出库入库盘点启动            new Thread(new ApplyRun()).start();            Thread.sleep(1000);        //货位库存启动                       /* tset2 t=new tset2();                        t.gp2();*/                        //ceshi();    }    public void ceshi() throws ParseException  {        System.out.println("进入此方法...........................1");        // 一天的毫秒数        long daySpan = 24 * 60 * 60 * 1000;        // 规定的每天时间15:33:30运行        final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd '12:05:30'");        System.out.println("进入此方法..........................."+sdf);        // 首次运行时间        Date startTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(sdf.format(new Date()));        // 如果今天的已经过了 首次运行时间就改为明天        if (System.currentTimeMillis() > startTime.getTime())            startTime = new Date(startTime.getTime() + daySpan);        Timer t = new Timer();        TimerTask task = new TimerTask() {            @Override            public void run() {                // 要执行的代码                //货物库存                System.out.println("进入此方法...............HwkcGp---Flag值......'"+HwkcGp.flag+"'......"+sdf);                HwkcGp.flag = false;                try {                    Thread.sleep(10000);                } catch (InterruptedException e) {                    e.printStackTrace();                }                HwkcGp.flag=true;                HwkcTest.a.clear();                new Thread(new HwkcRun()).run();            }        };        // 以每24小时执行一次        t.scheduleAtFixedRate(task, startTime, daySpan);    }    public String GetContent() {        return EslTest.Instance.GetReturnContent();    }    public String AppendString(String strContent) {        //clear the JTextArea        //display the content        String s2 = new String();        String s3 = new String();        String s1 = new String();        try {            byte[] ss = strContent.getBytes("GB2312");            for (int i = 0; i <= ss.length - 1; i++) {                s1 += String.format("%02X ", ss[i]);                if (String.format("%02X", ss[0]).trim().equals("64")) {                    if (i >= 1 && i <= 4) {                        s2 += String.format("%02X ", ss[i]).substring(1, 2);                    }                    if (i > 7) {                        System.err.println("ss:" + String.format("%02X ", ss[i]).substring(0, 1));                        if (String.format("%02X ", ss[i]).substring(0, 1).equals("3")) {                            s3 += String.format("%02X ", ss[i]).substring(1, 2);                        }                    }                }            }        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        }        ApplyTest.isaddr = s2;        if (!s3.equals("")) {            try {                Integer a = Integer.parseInt(s3);                ApplyTest.isnum=a;            } catch (NumberFormatException e) {                e.printStackTrace();            }        }        // ApplyTest.isnum = Integer.parseInt(s3);        return s1;    }}